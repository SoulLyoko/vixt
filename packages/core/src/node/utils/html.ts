import type { AppOptions } from '../app'
import type { Vixt } from '../vixt'

import fs from 'fs-extra'
import path from 'pathe'

function resolveHeadTag(tag: string, attrs: Record<string, string>) {
  const attrsStr = Object.entries(attrs).filter(([k]) => k !== 'children').map(([k, v]) => `${k}="${v}"`).join(' ')
  return attrs?.children ? `<${tag} ${attrsStr}>${attrs.children}</${tag}>` : `<${tag} ${attrsStr} />`
}

export function generateIndexHtml(options: AppOptions, vixt: Vixt) {
  const { buildDir, rootDir, srcDir } = vixt.options

  const indexHtmlPath = path.resolve(rootDir!, 'index.html')
  if (!fs.existsSync(indexHtmlPath))
    fs.outputFileSync(indexHtmlPath, `<!-- Generated by Vixt -->\n<!-- This file transform from '${path.basename(buildDir!)}/index.html' -->\n`)

  const { head = {}, rootTag, rootId, entryFile } = options

  const heads: [string, any[]][] = Object.entries(head)
  const headTemplate = heads.filter(([k]) => k !== 'noscript').map(([tag, attrs]) => attrs.map(e => resolveHeadTag(tag, e)).reverse()).flat().join('\n')
  const noscriptTemplate = heads.filter(([k]) => k === 'noscript').map(([tag, attrs]) => attrs.map(e => resolveHeadTag(tag, e)).reverse()).flat().join('\n')

  let { loadingTemplate = '' } = options
  if (!loadingTemplate) {
    for (const layer of vixt._layers) {
      const loadingTemplatePath = path.resolve(layer.cwd!, 'loading.html')
      if (fs.existsSync(loadingTemplatePath)) {
        loadingTemplate = fs.readFileSync(loadingTemplatePath, 'utf-8')
        break
      }
    }
  }

  const entryFilePath = /&\.|\//.test(entryFile ?? '') ? entryFile : `${srcDir!.replace(rootDir!, '')}/${entryFile}`

  const code = `<!DOCTYPE html>
<html>
  <head>
${headTemplate}
  </head>
  <body>
    <${rootTag} id="${rootId}">
${loadingTemplate}
    </${rootTag}>
    <script type="module" src="${entryFilePath}"></script>
${noscriptTemplate}
  </body>
</html>
`
  fs.outputFileSync(path.resolve(buildDir!, 'index.html'), code)
  return code
}
